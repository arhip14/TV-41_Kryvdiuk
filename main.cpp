/* ----------------------------------------------------------------<Header>-
 –ù–∞–∑–≤–∞:        domino_solver.cpp
 –ó–∞–≥–æ–ª–æ–≤–æ–∫:    –†–æ–∑–≤'—è–∑—É–≤–∞—á –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∑ –¥–æ–º—ñ–Ω–æ
 –ì—Ä—É–ø–∞:        –¢–í-41
 –°—Ç—É–¥–µ–Ω—Ç:      –ö—Ä–∏–≤–¥—é–∫ –ê.–í.
 –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: 2025-05-12
 –û—Å—Ç–∞–Ω–Ω—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: 2025-05-12
 –û–ø–∏—Å:
    –ü—Ä–æ–≥—Ä–∞–º–∞ —Ä–æ–∑–≤'—è–∑—É—î –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∑ –¥–æ–º—ñ–Ω–æ –Ω–∞ 2D –ø–æ–ª—ñ –º–µ—Ç–æ–¥–æ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ
    –ø–µ—Ä–µ–±–æ—Ä—É (backtracking). –ü–æ–ª–µ —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ —á–∏—Å–ª–∞–º–∏ –≤—ñ–¥ 0 –¥–æ 6.
    –ú–µ—Ç–∞ - –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ç–∞–∫, —â–æ–± –∫–æ–∂–Ω–∞ –ø–∞—Ä–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö —á–∏—Å–µ–ª
    —É—Ç–≤–æ—Ä—é–≤–∞–ª–∞ –¥–æ–º—ñ–Ω–æ. –ö–æ–∂–Ω–∞ –º–æ–∂–ª–∏–≤–∞ –ø–∞—Ä–∞ —á–∏—Å–µ–ª (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É)
    –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
 ------------------------------------------------------------------</Header>-*/

 #include <iostream>
 #include <vector>
 #include <set>
 #include <fstream>
 #include <iomanip>
 #include <map>
 #include <limits>
 
 using namespace std;
 
 #define EMPTY -2
 #define MISSING -1
 #define MIN_VALUE 0
 #define MAX_VALUE 6
 #define TOTAL_DOMINOES 28
 #define MAX_GRID_CELLS 100
 
 /* ---------------------------------------------------------------------[<]-
     –ö–ª–∞—Å DominoSolver
     –†–µ–∞–ª—ñ–∑—É—î –ª–æ–≥—ñ–∫—É –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∑ –¥–æ–º—ñ–Ω–æ –º–µ—Ç–æ–¥–æ–º backtracking.
  ---------------------------------------------------------------------[>]-*/
 class DominoSolver {
 public:
     set<pair<int, int>> autoInserted;
 private:
     vector<vector<int>> grid;
     set<pair<int, int>> allDominoes;
     set<pair<int, int>> usedDominoes;
 
 /* ---------------------------------------------------------------------[<]-
       –ü–æ–≤–µ—Ä—Ç–∞—î –ø–∞—Ä—É —á–∏—Å–µ–ª —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è.
  ---------------------------------------------------------------------[>]-*/
     pair<int, int> myMinMax(int a, int b) {
         if (a < b) {
             return {a, b};
         } else {
             return {b, a};
         }
     }
 /* ---------------------------------------------------------------------[<]-
      –î–æ–¥–∞—î –ø–∞—Ä—É –¥–æ –º–Ω–æ–∂–∏–Ω–∏, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î.
 ---------------------------------------------------------------------[>]-*/
     void insertPair(set<pair<int, int>>& s, pair<int, int> p) {
         if (!s.count(p)) {
             s.insert(p);
         }
     }
 /* ---------------------------------------------------------------------[<]-
       –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –æ–±—Ä–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É.
 ---------------------------------------------------------------------[>]-*/
     bool isValid(int row, int col, int value) {
         if (value < MIN_VALUE || value > MAX_VALUE) {
             return false;
         }
         int rows = grid.size();
         int cols = (rows > 0) ? grid[0].size() : 0;
         int dr[4] = {-1, 1, 0, 0};
         int dc[4] = {0, 0, -1, 1};
         for (int i = 0; i < 4; i++) {
             int newRow = row + dr[i];
             int newCol = col + dc[i];
             if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
                 if (grid[newRow][newCol] >= MIN_VALUE && grid[newRow][newCol] <= MAX_VALUE) {
                     pair<int, int> domino = myMinMax(value, grid[newRow][newCol]);
                     if (allDominoes.count(domino) && usedDominoes.count(domino)) {
                         return false;
                     }
                 }
             }
         }
         return true;
     }
 /* ---------------------------------------------------------------------[<]-
      –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É –∑ –Ω–∞–π–º–µ–Ω—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–æ–∂–ª–∏–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
 ---------------------------------------------------------------------[>]-*/
     pair<int, int> findNextMissing() {
         int best_row = -1, best_col = -1;
         int min_possible_values = MAX_VALUE + 2;
         for (int r = 0; r < grid.size(); ++r) {
             for (int c = 0; c < grid[r].size(); ++c) {
                 if (grid[r][c] == MISSING) {
                     set<int> possible_values;
                     for (int v = MIN_VALUE; v <= MAX_VALUE; ++v) {
                         if (isValid(r, c, v)) {
                             possible_values.insert(v);
                         }
                     }
                     if (possible_values.size() < min_possible_values) {
                         min_possible_values = possible_values.size();
                         best_row = r;
                         best_col = c;
                     }
                 }
             }
         }
         return {best_row, best_col};
     }
 /* ---------------------------------------------------------------------[<]-
      –ü–æ–≤–µ—Ä—Ç–∞—î –º–Ω–æ–∂–∏–Ω—É –≤—Å—ñ—Ö —É—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–º—ñ–Ω–æ –Ω–∞ –ø–æ–ª—ñ.
  ---------------------------------------------------------------------[>]-*/
     set<pair<int, int>> getFormedDominoes() {
         set<pair<int, int>> formed;
         int rows = grid.size();
         int cols = (rows > 0) ? grid[0].size() : 0;
         for (int r = 0; r < rows; ++r) {
             for (int c = 0; c < cols; ++c) {
                 if (grid[r][c] != EMPTY) {
                     if (c + 1 < cols && grid[r][c + 1] != EMPTY) {
                         pair<int, int> domino = myMinMax(grid[r][c], grid[r][c + 1]);
                         insertPair(formed, domino);
                         drawDominoLines(r, c, r, c + 1);
                     }
                     if (r + 1 < rows && grid[r + 1][c] != EMPTY) {
                         pair<int, int> domino = myMinMax(grid[r][c], grid[r + 1][c]);
                         insertPair(formed, domino);
                         drawDominoLines(r, c, r + 1, c);
                     }
                 }
             }
         }
         return formed;
     }
 /* ---------------------------------------------------------------------[<]-
      –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–º—ñ–Ω–æ –ø—Ä–∏—Å—É—Ç–Ω—ñ –Ω–∞ –ø–æ–ª—ñ.
  ---------------------------------------------------------------------[>]-*/
     bool isSolution() {
         set<pair<int, int>> formed_dominoes = getFormedDominoes();
         return formed_dominoes == allDominoes;
     }
 /* ---------------------------------------------------------------------[<]-
       –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–ª–µ —â–µ –º–æ–∂–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ–∑–≤'—è–∑–∫—É.
  ---------------------------------------------------------------------[>]-*/
      bool canLeadToSolution() {
         cout << "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä—ñ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–æ–ª—ñ\n";
         int filled_count = 0;
         for (const auto& row : grid) {
             for (int val : row) {
                 if (val != MISSING && val != EMPTY) {
                     filled_count++;
                 }
             }
         }
         return filled_count <= int(allDominoes.size()) * 2;
     }
 /* ---------------------------------------------------------------------[<]-
       –ú–∞–ª—é—î –ª—ñ–Ω—ñ—ó –¥–æ–º—ñ–Ω–æ –º—ñ–∂ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É).
  ---------------------------------------------------------------------[>]-*/
     void drawDominoLines(int r1, int c1, int r2, int c2) {
         if (r1 == r2) {
             cout << "–ù–∞–º–∞–ª—å–æ–≤–∞–Ω–æ –ª—ñ–Ω—ñ—é –º—ñ–∂ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ (" << r1 << "," << c1 << ") —Ç–∞ (" << r2 << "," << c2 << ")\n";
         } else if (c1 == c2) {
             cout << "–ù–∞–º–∞–ª—å–æ–≤–∞–Ω–æ –ª—ñ–Ω—ñ—é –º—ñ–∂ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ (" << r1 << "," << c1 << ") —Ç–∞ (" << r2 << "," << c2 << ")\n";
         }
     }
 public:
 /* ---------------------------------------------------------------------[<]-
      –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å –∞–±–æ —É —Ñ–∞–π–ª.
  ---------------------------------------------------------------------[>]-*/
    // –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å
    void printGrid(ostream& os) {
        os << "\n==================== –†—ñ—à–µ–Ω–Ω—è ====================\n";
        for (int r = 0; r < grid.size(); ++r) {
            for (int c = 0; c < grid[r].size(); ++c) {
                int val = grid[r][c];
                if (val != EMPTY) {
                    if (autoInserted.count({r, c})) {
                        os << "\033[32m" << val << "\033[0m ";
                    } else {
                        os << val << " ";
                    }
                } else {
                    os << "  ";
                }
            }
            os << endl;
        }
        os << "==================================================\n";
        os << "\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –¥–æ–º—ñ–Ω–æ:\n";
        for (const auto& d : usedDominoes) {
            os << "–î–æ–º—ñ–Ω–æ: {"
               << "\033[32m" << d.first << "\033[0m"
               << ", "
               << "\033[32m" << d.second << "\033[0m"
               << "}\n";
        }
    }

    // –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–ª—è —É —Ñ–∞–π–ª
    void printGridToFile(ostream& os) {
        os << "\n==================== –†—ñ—à–µ–Ω–Ω—è ====================\n";
        for (int r = 0; r < grid.size(); ++r) {
            for (int c = 0; c < grid[r].size(); ++c) {
                int val = grid[r][c];
                if (val != EMPTY) {
                    if (autoInserted.count({r, c})) {
                        os << val << " ";
                    } else {
                        os << val << " ";
                    }
                } else {
                    os << "  ";
                }
            }
            os << endl;
        }
        os << "==================================================\n";
    }
 /* ---------------------------------------------------------------------[<]-
      –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏—Ä—ñ—à—É—î –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä—É.
  ---------------------------------------------------------------------[>]-*/
     bool solvePuzzle() {
         bool changed = true;
         while (changed) {
             changed = false;
             for (int r = 0; r < grid.size(); r++) {
                 for (int c = 0; c < grid[r].size(); c++) {
                     if (grid[r][c] >= MIN_VALUE && grid[r][c] <= MAX_VALUE) {
                         int dr[4] = {-1, 1, 0, 0};
                         int dc[4] = {0, 0, -1, 1};
                         int missing_neighbor_r = -1, missing_neighbor_c = -1;
                         int neighbor_count = 0;
                         for (int i = 0; i < 4; i++) {
                             int nr = r + dr[i];
                             int nc = c + dc[i];
                             if (nr >= 0 && nr < grid.size() && nc >= 0 && nc < grid[nr].size()) {
                                 if (grid[nr][nc] == MISSING) {
                                     missing_neighbor_r = nr;
                                     missing_neighbor_c = nc;
                                     neighbor_count++;
                                 } else if (grid[nr][nc] >= MIN_VALUE && grid[nr][nc] <= MAX_VALUE) {
                                     neighbor_count++;
                                 }
                             }
                         }
                         if (neighbor_count < 2 && missing_neighbor_r != -1) {
                             set<int> possible_values;
                             for (int v = MIN_VALUE; v <= MAX_VALUE; v++) {
                                 vector<vector<int>> temp_grid = grid;
                                 temp_grid[missing_neighbor_r][missing_neighbor_c] = v;
                                 pair<int, int> domino = myMinMax(grid[r][c], v);
                                 if (allDominoes.count(domino) && !usedDominoes.count(domino)) {
                                     possible_values.insert(v);
                                 }
                             }
                             if (possible_values.size() == 1) {
                                 grid[missing_neighbor_r][missing_neighbor_c] = *possible_values.begin();
                                 autoInserted.insert({missing_neighbor_r, missing_neighbor_c});
                                 cout << "‚ûï –î–æ–¥–∞—î—Ç—å—Å—è –¥–æ–º—ñ–Ω–æ: {" << grid[r][c] << ", " << *possible_values.begin() << "} // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –¥–æ–º—ñ–Ω–æ\n";
                                 insertPair(usedDominoes, myMinMax(grid[r][c], *possible_values.begin()));
                                 pair<int, int> domino = myMinMax(grid[r][c], *possible_values.begin());
                                 if (usedDominoes.count(domino)) {
                                     cout << "‚úÖ –î–æ–º—ñ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {" << domino.first << ", " << domino.second << "} // –î–æ–º—ñ–Ω–æ –≤–∂–µ —É —Å–ø–∏—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö\n";
                                 }
                                 changed = true;
                             }
                         }
                     }
                 }
             }
         }
         pair<int, int> next_missing = findNextMissing();
         int row = next_missing.first;
         int col = next_missing.second;
         if (row == -1) {
             if (isSolution()) {
                 cout << "‚úÖ –†—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ!\n";
                 cout << "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –¥–æ–º—ñ–Ω–æ: " << usedDominoes.size() << " (–æ—á—ñ–∫—É—î—Ç—å—Å—è: " << TOTAL_DOMINOES << ")\n";
                 for (const auto& d : usedDominoes) {
                     cout << "–î–æ–º—ñ–Ω–æ: {" << d.first << "," << d.second << "}\n";
                 }
                 return true;
             }
             return isSolution();
         }
         if (!canLeadToSolution()) {
             return false;
         }
         for (int value = MIN_VALUE; value <= MAX_VALUE; value++) {
             if (isValid(row, col, value)) {
                 vector<vector<int>> temp_grid = grid;
                 temp_grid[row][col] = value;
                 set<pair<int, int>> new_used_dominoes = usedDominoes;
                 bool possible = true;
                 int dr[4] = {-1, 1, 0, 0};
                 int dc[4] = {0, 0, -1, 1};
                 for (int i = 0; i < 4; i++) {
                     int nr = row + dr[i];
                     int nc = col + dc[i];
                     if (nr >= 0 && nr < grid.size() && nc >= 0 && nc < grid[nr].size() &&
                         temp_grid[nr][nc] >= MIN_VALUE && temp_grid[nr][nc] <= MAX_VALUE) {
                         pair<int, int> domino = myMinMax(value, temp_grid[nr][nc]);
                         if (allDominoes.count(domino) && usedDominoes.count(domino)) {
                             possible = false;
                             break;
                         } else if (allDominoes.count(domino)) {
                             cout << "‚ûï –î–æ–¥–∞—î—Ç—å—Å—è –¥–æ–º—ñ–Ω–æ: {" << value << ", " << temp_grid[nr][nc] << "} // –î–æ–¥–∞—î–º–æ –¥–æ–º—ñ–Ω–æ –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏\n";
                             insertPair(new_used_dominoes, domino);
                             if (new_used_dominoes.count(domino)) {
                                 cout << "‚úÖ –î–æ–º—ñ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {" << domino.first << ", " << domino.second << "} // –î–æ–º—ñ–Ω–æ —Ç–µ–ø–µ—Ä —É —Å–ø–∏—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö\n";
                             }
                         }
                     }
                 }
                 if (possible) {
                     grid[row][col] = value;
                     autoInserted.insert({row, col});
                     cout << "–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ " << value << " —É –∫–ª—ñ—Ç–∏–Ω–∫—É (" << row << ", " << col << ") // –ü–æ–∫–∞–∑—É—î, —â–æ –º–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —Ü–µ —á–∏—Å–ª–æ\n";
                     set<pair<int, int>> backup_used = usedDominoes;
                     set<pair<int, int>> backup_autoInserted = autoInserted;
                     usedDominoes = new_used_dominoes;
                     if (solvePuzzle()) {
                         cout << "‚úÖ –í–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç–∏ " << value << " —É (" << row << ", " << col << ") // –ß–∏—Å–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ\n";
                         return true;
                     }
                     cout << "‚Ü©Ô∏è –í—ñ–¥–∫–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ " << value << " –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∏ (" << row << ", " << col << ") // –í—ñ–¥–º—ñ–Ω—è—î–º–æ —Ü—é —Å–ø—Ä–æ–±—É\n";
                     grid[row][col] = MISSING;
                     usedDominoes = backup_used;
                     autoInserted = backup_autoInserted;
                 }
             }
         }
         return false;
     }
 public:
 /* ---------------------------------------------------------------------[<]-
       –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä. –ü—Ä–∏–π–º–∞—î –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–ª–µ.
  ---------------------------------------------------------------------[>]-*/
     DominoSolver(const vector<vector<int>>& initial) : grid(initial) {
         for (int i = MIN_VALUE; i <= MAX_VALUE; ++i) {
             for (int j = i; j <= MAX_VALUE; ++j) {
                 allDominoes.insert({i, j});
             }
         }
     }
 /* ---------------------------------------------------------------------[<]-
       –ó–∞–ø—É—Å–∫–∞—î –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ç—ñ–∫.
  ---------------------------------------------------------------------[>]-*/
    bool solve(ostream& os, ostream& of) { 
        bool found = solvePuzzle();
        if (found) {
            os << "\nüéâ –†—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ!\n";
            printGrid(os); 
            of << "\nüéâ –†—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ!\n"; 
            printGridToFile(of);
            os << "\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –¥–æ–º—ñ–Ω–æ...\n";
            os << "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –¥–æ–º—ñ–Ω–æ: " << usedDominoes.size() << " (–æ—á—ñ–∫—É—î—Ç—å—Å—è: " << TOTAL_DOMINOES << ")\n";
            for (const auto& d : usedDominoes) {
                os << "–î–æ–º—ñ–Ω–æ: {" << d.first << "," << d.second << "}\n";
                of << "–î–æ–º—ñ–Ω–æ: {" << d.first << "," << d.second << "}\n";
            }
        } else {
            os << "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—ñ—à–µ–Ω–Ω—è.\n";
            of << "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—ñ—à–µ–Ω–Ω—è.\n";
            printGrid(os);
            printGridToFile(of);
        }
        return found;
    }
 };
 
 /* ---------------------------------------------------------------------[<]-
  –§—É–Ω–∫—Ü—ñ—è: printHeader
  –û–ø–∏—Å: –í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ —ñ –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è.
  ---------------------------------------------------------------------[>]-*/
 void printHeader() {
     cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
     cout << "‚ïë                         üî∑–ö—É—Ä—Å–æ–≤–∞ —Ä–æ–±–æ—Ç–∞                       ‚ïë\n";
     cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
     cout << "‚ïë  –ó–∞–≤–¥–∞–Ω–Ω—è: –†–æ–∑—Ä–æ–±—ñ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ —Ç–∞ —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ   ‚ïë\n";
     cout << "‚ïë  –π–æ–≥–æ —É –≤–∏–≥–ª—è–¥—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –º–æ–≤–æ—é ANSI C++                        ‚ïë\n";
     cout << "‚ïë  –Ü–¥–µ—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∑ –∫—ñ—Å—Ç—è–∫–∞–º–∏ –¥–æ–º—ñ–Ω–æ. –ù–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ –∑–∞–¥–∞–Ω–æ  ‚ïë\n";
     cout << "‚ïë  –Ω–∞–±—ñ—Ä –¥–æ–º—ñ–Ω–æ, –∫–æ–∂–Ω–µ –¥–æ–º—ñ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.      ‚ïë\n";
     cout << "‚ïë  –ù–∞–º–∞–ª—é–π—Ç–µ –ª—ñ–Ω—ñ—ó, —â–æ–± –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ —Å—Ç–∞–Ω–æ–≤–∏—â–µ –∫–æ–∂–Ω–æ–≥–æ –¥–æ–º—ñ–Ω–æ.     ‚ïë\n";
     cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
     cout << ">> –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ —Ä—ñ—à–µ–Ω—å...\n";
 }
 
 /* ---------------------------------------------------------------------[<]-
  –§—É–Ω–∫—Ü—ñ—è: main
  –û–ø–∏—Å: –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è.
  ---------------------------------------------------------------------[>]-*/
 int main() {
     printHeader();
     cin.ignore();
     ofstream output("output.txt"); 
     if (!output.is_open()) {
         cerr << "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É output.txt –¥–ª—è –∑–∞–ø–∏—Å—É!\n";
         return 1;
     }
     vector<vector<int>> initial_grid = {
         {3, 6, EMPTY, EMPTY, EMPTY, 0, 1, 1, 3, 0, 1, 5, 5},
         {6, 2, EMPTY, MISSING, EMPTY, 0, 4, 5, MISSING, 6, 1, 6, 2},
         {0, 4, EMPTY, 0, EMPTY, 6, 5, 6, 1, MISSING, 3, EMPTY, EMPTY},
         {0, 2, 3, 5, 2, 2, 3, 3, EMPTY, EMPTY, MISSING, EMPTY, EMPTY},
         {6, 4, 2, 4, 4, 3, 5, 2, EMPTY, EMPTY, 5, 0, 1},
         {EMPTY, EMPTY, 1, MISSING, 4, EMPTY, EMPTY, MISSING, EMPTY, EMPTY, 1, 4, 2}
     };
     vector<vector<int>> grid;
     int choice = 0;
     while (true) {
         cout << "\n==================== –ú–µ–Ω—é ====================\n";
         cout << "1 - –í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ\n";
         cout << "2 - –í–≤–µ–¥–µ–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–æ—é –∑–Ω–∞—á–µ–Ω–Ω—è\n";
         cout << "3 - –í–∏—Ö—ñ–¥\n";
         cout << "=============================================\n";
         cout << "–í–∏–±–µ—Ä—ñ—Ç—å (1, 2, –∞–±–æ 3): ";
         cin >> choice;
         if (cin.fail()) {
             cin.clear();
             cin.ignore(numeric_limits<streamsize>::max(), '\n');
             cout << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
             continue;
         }
         if (choice == 1) {
             grid.clear();
             int rows, cols;
             cout << "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: ";
             cin >> rows;
             cout << "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤: ";
             cin >> cols;
             if (cin.fail() || rows <= 0 || cols <= 0 || rows * cols > MAX_GRID_CELLS) {
                 cin.clear();
                 cin.ignore(numeric_limits<streamsize>::max(), '\n');
                 cout << "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n";
                 continue;
             }
             grid.resize(rows, vector<int>(cols, MISSING));
             cout << "–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è (–≤—ñ–¥ " << MIN_VALUE << " –¥–æ " << MAX_VALUE << ", " << MISSING << " –¥–ª—è –≤—Ç—Ä–∞—á–µ–Ω–∏—Ö, " << EMPTY << " –¥–ª—è –ø—É—Å—Ç–∏—Ö):\n";
             for (int r = 0; r < rows; ++r)
                 for (int c = 0; c < cols; ++c) {
                     int val;
                     while (true) {
                         cout << "–ö–ª—ñ—Ç–∏–Ω–∫–∞ [" << r << "][" << c << "]: ";
                         cin >> val;
                         if (cin.fail() || val < EMPTY || val > MAX_VALUE) {
                             cin.clear();
                             cin.ignore(numeric_limits<streamsize>::max(), '\n');
                             cout << "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ " << EMPTY << " –¥–æ " << MAX_VALUE << ".\n";
                         } else {
                             grid[r][c] = val;
                             break;
                         }
                     }
                 }
             cout << "\n–ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è...\n";
             DominoSolver solver(grid);
             solver.solve(cout, output); 
         } else if (choice == 2) {
             cout << "–ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è...\n";
             DominoSolver solver(initial_grid);
             solver.solve(cout, output);
         } else if (choice == 3) {
             cout << "–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...\n";
             break;
         } else {
             cout << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
         }
     }
     output.close(); 
     return 0;
 }
 